/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  MatchResults,
} from '@stencil/router';

export namespace Components {
  interface EnjinGallery {}
  interface EnjinOrganism {
    'component': {
      docs: string;
      docsTags: any[];
      encapsulation: string;
      events: any[];
      methods: any[];
      presets: any;
      props: {
        attr: string;
        default: any;
        docs: string;
        docsTags: any[];
        mutable: boolean;
        name: string;
        optional: boolean;
        reflectToAttr: boolean;
        required: boolean;
        type: string;
      }[];
      readme: string;
      slots: any[];
      styles: any[];
      tag: string;
      usage: any;
    };
    'match': MatchResults;
  }
  interface EnjinPayWithCard {
    'stripeKey': string;
  }
  interface EnjinSidebar {
    'components': any;
  }
  interface EnjinSidebarComponent {
    'component': {
      docs: string;
      docsTags: any[];
      encapsulation: string;
      events: any[];
      methods: any[];
      presets: any;
      props: {
        attr: string;
        default: any;
        docs: string;
        docsTags: any[];
        mutable: boolean;
        name: string;
        optional: boolean;
        reflectToAttr: boolean;
        required: boolean;
        type: string;
      }[];
      readme: string;
      slots: any[];
      styles: any[];
      tag: string;
      usage: any;
    };
  }
  interface EnjinStarRating {
    /**
    * Whether or not the field is disabled
    */
    'disabled': boolean;
    /**
    * The max available star rating
    */
    'maxRating': number;
    /**
    * The name of the input
    */
    'name': string;
    /**
    * Set the current rating
    */
    'setCurrentRating': (rating: any) => Promise<void>;
    'testEl': (result: string) => any;
    /**
    * The value of the rating input
    */
    'value': string;
  }
  interface EnjinStarRatingScoped {
    'disabled': boolean;
    'maxRating': number;
    'name': string;
    'setCurrentRating': (rating: any) => Promise<void>;
    'value': string;
  }
  interface EnjinStarRatingShadow {
    'disabled': boolean;
    'maxRating': number;
    'name': string;
    'setCurrentRating': (rating: any) => Promise<void>;
    'value': string;
  }
  interface EnjinTestComponent {
    'array': any;
    'boolean': boolean;
    'fn': () => any;
    'object': any;
    'string': string;
  }
}

declare global {


  interface HTMLEnjinGalleryElement extends Components.EnjinGallery, HTMLStencilElement {}
  var HTMLEnjinGalleryElement: {
    prototype: HTMLEnjinGalleryElement;
    new (): HTMLEnjinGalleryElement;
  };

  interface HTMLEnjinOrganismElement extends Components.EnjinOrganism, HTMLStencilElement {}
  var HTMLEnjinOrganismElement: {
    prototype: HTMLEnjinOrganismElement;
    new (): HTMLEnjinOrganismElement;
  };

  interface HTMLEnjinPayWithCardElement extends Components.EnjinPayWithCard, HTMLStencilElement {}
  var HTMLEnjinPayWithCardElement: {
    prototype: HTMLEnjinPayWithCardElement;
    new (): HTMLEnjinPayWithCardElement;
  };

  interface HTMLEnjinSidebarElement extends Components.EnjinSidebar, HTMLStencilElement {}
  var HTMLEnjinSidebarElement: {
    prototype: HTMLEnjinSidebarElement;
    new (): HTMLEnjinSidebarElement;
  };

  interface HTMLEnjinSidebarComponentElement extends Components.EnjinSidebarComponent, HTMLStencilElement {}
  var HTMLEnjinSidebarComponentElement: {
    prototype: HTMLEnjinSidebarComponentElement;
    new (): HTMLEnjinSidebarComponentElement;
  };

  interface HTMLEnjinStarRatingElement extends Components.EnjinStarRating, HTMLStencilElement {}
  var HTMLEnjinStarRatingElement: {
    prototype: HTMLEnjinStarRatingElement;
    new (): HTMLEnjinStarRatingElement;
  };

  interface HTMLEnjinStarRatingScopedElement extends Components.EnjinStarRatingScoped, HTMLStencilElement {}
  var HTMLEnjinStarRatingScopedElement: {
    prototype: HTMLEnjinStarRatingScopedElement;
    new (): HTMLEnjinStarRatingScopedElement;
  };

  interface HTMLEnjinStarRatingShadowElement extends Components.EnjinStarRatingShadow, HTMLStencilElement {}
  var HTMLEnjinStarRatingShadowElement: {
    prototype: HTMLEnjinStarRatingShadowElement;
    new (): HTMLEnjinStarRatingShadowElement;
  };

  interface HTMLEnjinTestComponentElement extends Components.EnjinTestComponent, HTMLStencilElement {}
  var HTMLEnjinTestComponentElement: {
    prototype: HTMLEnjinTestComponentElement;
    new (): HTMLEnjinTestComponentElement;
  };
  interface HTMLElementTagNameMap {
    'enjin-gallery': HTMLEnjinGalleryElement;
    'enjin-organism': HTMLEnjinOrganismElement;
    'enjin-pay-with-card': HTMLEnjinPayWithCardElement;
    'enjin-sidebar': HTMLEnjinSidebarElement;
    'enjin-sidebar-component': HTMLEnjinSidebarComponentElement;
    'enjin-star-rating': HTMLEnjinStarRatingElement;
    'enjin-star-rating-scoped': HTMLEnjinStarRatingScopedElement;
    'enjin-star-rating-shadow': HTMLEnjinStarRatingShadowElement;
    'enjin-test-component': HTMLEnjinTestComponentElement;
  }
}

declare namespace LocalJSX {
  interface EnjinGallery extends JSXBase.HTMLAttributes<HTMLEnjinGalleryElement> {}
  interface EnjinOrganism extends JSXBase.HTMLAttributes<HTMLEnjinOrganismElement> {
    'component'?: {
      docs: string;
      docsTags: any[];
      encapsulation: string;
      events: any[];
      methods: any[];
      presets: any;
      props: {
        attr: string;
        default: any;
        docs: string;
        docsTags: any[];
        mutable: boolean;
        name: string;
        optional: boolean;
        reflectToAttr: boolean;
        required: boolean;
        type: string;
      }[];
      readme: string;
      slots: any[];
      styles: any[];
      tag: string;
      usage: any;
    };
    'match'?: MatchResults;
  }
  interface EnjinPayWithCard extends JSXBase.HTMLAttributes<HTMLEnjinPayWithCardElement> {
    'onEnjinCardSubmit'?: (event: CustomEvent<any>) => void;
    'stripeKey'?: string;
  }
  interface EnjinSidebar extends JSXBase.HTMLAttributes<HTMLEnjinSidebarElement> {
    'components'?: any;
  }
  interface EnjinSidebarComponent extends JSXBase.HTMLAttributes<HTMLEnjinSidebarComponentElement> {
    'component'?: {
      docs: string;
      docsTags: any[];
      encapsulation: string;
      events: any[];
      methods: any[];
      presets: any;
      props: {
        attr: string;
        default: any;
        docs: string;
        docsTags: any[];
        mutable: boolean;
        name: string;
        optional: boolean;
        reflectToAttr: boolean;
        required: boolean;
        type: string;
      }[];
      readme: string;
      slots: any[];
      styles: any[];
      tag: string;
      usage: any;
    };
    'onEnjinSetPreset'?: (event: CustomEvent<any>) => void;
  }
  interface EnjinStarRating extends JSXBase.HTMLAttributes<HTMLEnjinStarRatingElement> {
    /**
    * Whether or not the field is disabled
    */
    'disabled'?: boolean;
    /**
    * The max available star rating
    */
    'maxRating'?: number;
    /**
    * The name of the input
    */
    'name'?: string;
    'onEnjinStarRating'?: (event: CustomEvent<any>) => void;
    'testEl'?: (result: string) => any;
    /**
    * The value of the rating input
    */
    'value'?: string;
  }
  interface EnjinStarRatingScoped extends JSXBase.HTMLAttributes<HTMLEnjinStarRatingScopedElement> {
    'disabled'?: boolean;
    'maxRating'?: number;
    'name'?: string;
    'onFtStarRating'?: (event: CustomEvent<any>) => void;
    'value'?: string;
  }
  interface EnjinStarRatingShadow extends JSXBase.HTMLAttributes<HTMLEnjinStarRatingShadowElement> {
    'disabled'?: boolean;
    'maxRating'?: number;
    'name'?: string;
    'onFtStarRating'?: (event: CustomEvent<any>) => void;
    'value'?: string;
  }
  interface EnjinTestComponent extends JSXBase.HTMLAttributes<HTMLEnjinTestComponentElement> {
    'array'?: any;
    'boolean'?: boolean;
    'fn'?: () => any;
    'object'?: any;
    'string'?: string;
  }

  interface IntrinsicElements {
    'enjin-gallery': EnjinGallery;
    'enjin-organism': EnjinOrganism;
    'enjin-pay-with-card': EnjinPayWithCard;
    'enjin-sidebar': EnjinSidebar;
    'enjin-sidebar-component': EnjinSidebarComponent;
    'enjin-star-rating': EnjinStarRating;
    'enjin-star-rating-scoped': EnjinStarRatingScoped;
    'enjin-star-rating-shadow': EnjinStarRatingShadow;
    'enjin-test-component': EnjinTestComponent;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


